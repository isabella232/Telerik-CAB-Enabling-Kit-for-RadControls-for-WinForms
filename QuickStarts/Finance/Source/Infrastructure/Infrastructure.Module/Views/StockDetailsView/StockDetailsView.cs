//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using FinanceApplicationCAB.Infrastructure.Module.Views.StockDetailsView;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockDetailsView : UserControl, IStockDetailsView
	{
		public StockDetailsView()
		{
			InitializeComponent();
		}

		protected override void OnLoad(EventArgs e)
		{
			_presenter.OnViewReady();
			base.OnLoad(e);
		}

		protected override void OnControlAdded(ControlEventArgs e)
		{
			base.OnControlAdded(e);

			int y = 0;
			for (int i = 0; i < this.Controls.Count - 1; i++)
			{
				y += this.Controls[i].Height;
			}

			e.Control.Location = new System.Drawing.Point(0, y);
			e.Control.Width = this.Width;
			e.Control.Anchor = AnchorStyles.Left | AnchorStyles.Right;
		}

		#region IStockDetailsView Members

		public void ResetView()
		{
			this.Controls.Clear();
		}

		public void ShowItemSummary(StockItem item)
		{
			StockItemDetailsControl detailsControl = new StockItemDetailsControl();
			detailsControl.Summary = item.Summary;

			this.Controls.Add(detailsControl);
		}

		#endregion
	}
}

