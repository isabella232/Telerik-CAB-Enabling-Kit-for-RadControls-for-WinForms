//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Net;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Xsl;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockNewsView : UserControl, IStockNewsView
	{
        private BackgroundWorker worker = new BackgroundWorker();
        private string transformedXml;

		public StockNewsView()
		{
			InitializeComponent();

            worker.DoWork += new DoWorkEventHandler(worker_DoWork);
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
		}

        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                // RSS XML Feed URL
                string url = "http://finance.yahoo.com/news/category-earnings/rss";

                // Create an interface to the web
                WebClient webClient = new WebClient();

                // Download the XML into a string
                string xml = ASCIIEncoding.Default.GetString(webClient.DownloadData(url));

                XmlDocument inputDocument = new XmlDocument();
                inputDocument.LoadXml(xml);

                if (this.xslTransform == null)
                {
                    xslTransform = new XslTransform();
                    xslTransform.Load(".\\Views\\StockNewsView\\RssTransform.xslt");
                }

                XmlReader reader = xslTransform.Transform(inputDocument.CreateNavigator(), new XsltArgumentList());
                XmlDocument transformedXmlDocument = new XmlDocument();
                transformedXmlDocument.Load(reader);

                transformedXml = transformedXmlDocument.OuterXml;

                if (transformedXml.Length > 0)
                {
                    transformedXml = transformedXml.Replace("&lt;", "<");
                    transformedXml = transformedXml.Replace("&gt;", ">");
                    transformedXml = transformedXml.Replace("&amp;quot;", "\"");
                    transformedXml = transformedXml.Replace("&amp;nbsp;", " ");
                }

              
            }
            catch (Exception)
            {
            }
        }

        void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            this.webBrowser.DocumentText = transformedXml;
        }

		protected override void OnLoad(EventArgs e)
		{
			if (this._presenter != null)
			{
				_presenter.OnViewReady();
			}
			this.webBrowser.Visible = true;
			base.OnLoad(e);
		}

		XslTransform xslTransform = null;

		#region IStockNewsView Members

		public void SetRssXml(string id)
		{
            if (worker.IsBusy)
            {
                return;
            }

            worker.RunWorkerAsync();
		}

		#endregion
	}
}

