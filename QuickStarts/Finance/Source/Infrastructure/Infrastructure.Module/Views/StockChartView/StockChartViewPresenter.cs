//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using FinanceApplicationCAB.Infrastructure.Interface;
using FinanceApplicationCAB.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockChartViewPresenter : Presenter<IStockChartView>
	{
		/// <summary>
		/// This method is a placeholder that will be called by the view when it has been loaded.
		/// </summary>
		public override void OnViewReady()
		{
			base.OnViewReady();
		}

		/// <summary>
		/// Close the view
		/// </summary>
		public void OnCloseView()
		{
			base.CloseView();
		}

		[EventSubscription(EventTopicNames.SelectedItemsChanged, ThreadOption.UserInterface)]
		public void OnSelectedItemsChanged(object sender, EventArgs eventArgs)
		{
			List<StockItem> selectedItems = this.WorkItem.State[StateKeys.SelectedItems] as List<StockItem>;
			List<StockItem> chartItems = new List<StockItem>();
			string title = string.Empty;

			if (selectedItems != null && selectedItems.Count > 0)
			{
				string sector = selectedItems[0].Sector;
				title = string.Format("Day % Change for sector: {0}", sector);

				StockPortfolio stockPortfolio = this.WorkItem.State[StateKeys.StockPortfolio] as StockPortfolio;

				string[] keys = new string[stockPortfolio.ValuationGroups.Keys.Count];
				stockPortfolio.ValuationGroups.Keys.CopyTo(keys, 0);
				Array.Reverse(keys);
				foreach (string key in keys)
				{
					foreach (StockItem stockItem in stockPortfolio.ValuationGroups[key])
					{
						if (stockItem.Sector == sector)
						{
							chartItems.Add(stockItem);
						}
					}
				}

				this.View.SetChartItems(chartItems);
			}

			this.View.SetChartTitle(title);
		}

		[EventSubscription(EventTopicNames.HoveredItemsChanged, ThreadOption.UserInterface)]
		public void OnHoveredItemsChanged(object sender, EventArgs eventArgs)
		{
			List<StockItem> hoveredItems = this.WorkItem.State[StateKeys.HoveredItems] as List<StockItem>;

			this.View.SetHoveredItems(hoveredItems);
		}
	}
}

