//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using FinanceApplicationCAB.Infrastructure.Interface;
using System.Xml.Xsl;
using System.Xml;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockNewsView : UserControl, IStockNewsView
	{
		public StockNewsView()
		{
			InitializeComponent();
		}

		protected override void OnLoad(EventArgs e)
		{
			if (this._presenter != null)
			{
				_presenter.OnViewReady();
			}
			this.webBrowser.Visible = true;
			base.OnLoad(e);
		}

		XslTransform xslTransform = null;

		#region IStockNewsView Members

		public void SetRssXml(string xml)
		{
			try
			{
				XmlDocument inputDocument = new XmlDocument();
				inputDocument.LoadXml(xml);

				if (this.xslTransform == null)
				{
					xslTransform = new XslTransform();
					xslTransform.Load(".\\Views\\StockNewsView\\RssTransform.xslt");
				}

				XmlReader reader = xslTransform.Transform(inputDocument.CreateNavigator(), new XsltArgumentList());
				XmlDocument transformedXmlDocument = new XmlDocument();
				transformedXmlDocument.Load(reader);

				string transformedXml = transformedXmlDocument.OuterXml;

				if (transformedXml.Length > 0)
				{
					transformedXml = transformedXml.Replace("&lt;", "<");
					transformedXml = transformedXml.Replace("&gt;", ">");
					transformedXml = transformedXml.Replace("&amp;quot;", "\"");
					transformedXml = transformedXml.Replace("&amp;nbsp;", " ");
				}

				this.webBrowser.DocumentText = transformedXml;
			}
			catch(Exception)
			{
			}
		}

		#endregion
	}
}

