//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using FinanceApplicationCAB.Infrastructure.Interface;
using Telerik.WinControls.UI;
using System.Drawing;
using System.Collections.Generic;
using Telerik.WinControls;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockPortfolioView : UserControl, IStockPortfolioView
	{
		public StockPortfolioView()
		{
			InitializeComponent();

			this.radPanelBar.GroupStyle = Telerik.WinControls.PanelBarStyles.ExplorerBarStyle;
			this.radPanelBar.PanelBarElement.RadPropertyChanged += new Telerik.WinControls.RadPropertyChangedEventHandler(PanelBarElement_RadPropertyChanged);
			this.radPanelBar.MouseLeave += new EventHandler(radPanelBar_MouseLeave);

			RadThemeManager themeManager = new RadThemeManager();

			ThemeSource panelBarThemeSource = new ThemeSource();
			panelBarThemeSource.StorageType = ThemeStorageType.Resource;
			panelBarThemeSource.ThemeLocation = "FinanceApplicationCAB.Infrastructure.Module.Resources.FinanceApplication_PanelBar.xml";
			themeManager.LoadedThemes.Add(panelBarThemeSource);

			ThemeSource scrollBarThemeSource = new ThemeSource();
			scrollBarThemeSource.StorageType = ThemeStorageType.Resource;
			scrollBarThemeSource.ThemeLocation = "FinanceApplicationCAB.Infrastructure.Module.Resources.ScrollBarTOC.xml";
			themeManager.LoadedThemes.Add(scrollBarThemeSource);

			this.radPanelBar.ThemeName = "Desert"; //"FinanceApplication";
		}

		void PanelBarElement_RadPropertyChanged(object sender, Telerik.WinControls.RadPropertyChangedEventArgs e)
		{
			if (e.Property == StockItemElement.SelectedItemProperty)
			{
				StockItemElement prevSelected = e.OldValue as StockItemElement;
				if (prevSelected != null)
				{
					RadElementCollection prevGroup = prevSelected.Parent.Children;
					this.SetIsSelectedProperty(prevGroup, prevSelected.StockItem, false);
				}

				StockItemElement selected = e.NewValue as StockItemElement;
				RadElementCollection  group = selected.Parent.Children;

				this.SetIsSelectedProperty(group, selected.StockItem, true);

				this.OnSelectedItemsChanged();
			}

			if (e.Property == StockItemElement.HoveredItemProperty)
			{
				StockItemElement hoveredItem = e.NewValue as StockItemElement;

				if (hoveredItem != null && !this.hoveredStockElements.Contains(hoveredItem))
				{
					this.ClearHoveredItems();

					RadElementCollection group = hoveredItem.Parent.Children;
					string sector = hoveredItem.StockItem.Sector;
					foreach (StockItemElement stockElement in group)
					{
						if (stockElement.StockItem.Sector == sector)
						{
							stockElement.SetValue(StockItemElement.IsSelectedProperty, true);
							this.hoveredStockElements.Add(stockElement);
						}
					}
					this.hoveredItems = null;
					this.OnHoveredItemsChanged();
				}
			}
		}

		void radPanelBar_MouseLeave(object sender, EventArgs e)
		{
			this.ClearHoveredItems();

			this.hoveredStockElements.Clear();
			this.hoveredItems = null;
			this.OnHoveredItemsChanged();
		}

		private void ClearHoveredItems()
		{
			foreach (StockItemElement stockElement in this.hoveredStockElements)
			{
				if (this.selectedItems.Contains(stockElement.StockItem) == false)
				{
					stockElement.SetValue(StockItemElement.IsSelectedProperty, false);
				}
			}
			this.hoveredStockElements.Clear();
		}

		public event EventHandler<EventArgs> SelectedItemsChanged;

		private void OnSelectedItemsChanged()
		{
			if (this.SelectedItemsChanged != null)
			{
				this.SelectedItemsChanged(this, EventArgs.Empty);
			}
		}

		private void SetIsSelectedProperty(System.Collections.IEnumerable group, StockItem stockItem, bool value)
		{
			this.ClearSelection();

			string sector = stockItem.Sector;

			foreach (StockItemElement stockElement in group)
			{
				if (stockElement.StockItem.Sector == sector)
				{
					stockElement.SetValue(StockItemElement.IsSelectedProperty, value);
					if (value == true)
					{
						this.selectedItems.Add(stockElement.StockItem);
					}
				}
			}
		}

		private List<StockItem> selectedItems = new List<StockItem>();

		public List<StockItem> SelectedItems
		{
			get
			{
				return this.selectedItems;
			}
		}

		protected override void OnLoad(EventArgs e)
		{
			_presenter.OnViewReady();
			base.OnLoad(e);
		}

		#region IStockPortfolioView Members

		public void AddValuationGroup(string caption, string name)
		{
			RadPanelBarGroupElement newGroup = new RadPanelBarGroupElement();
			newGroup.Caption = caption;
			newGroup.Name = name;
			newGroup.Expanded = true;

			this.radPanelBar.Items.Add(newGroup);
		}

		public void AddStockItem(StockItem item, string groupName)
		{
			StockItemElement stockElement = new StockItemElement();
			stockElement.StockItem = item;
			stockElement.Size = new Size(200, 40);

			RadPanelBarGroupElement group = this.radPanelBar.Items[groupName] as RadPanelBarGroupElement;
			group.Items.Add(stockElement);
			stockElement.SetValue(StockItemElement.PositiveChangeProperty, item.Change > 0);
		}


		public event EventHandler<EventArgs> HoveredItemsChanged;

		private void OnHoveredItemsChanged()
		{
			if(this.HoveredItemsChanged != null)
			{
				this.HoveredItemsChanged(this, EventArgs.Empty);
			}
		}

		private List<StockItemElement> hoveredStockElements = new List<StockItemElement>();

		private List<StockItem> hoveredItems = null;

		public List<StockItem> HoveredItems
		{
			get
			{
				if (this.hoveredItems == null)
				{
					this.hoveredItems = new List<StockItem>();
					for (int i = 0; i < this.hoveredStockElements.Count; i++)
					{
						this.hoveredItems.Add(this.hoveredStockElements[i].StockItem);
					}
				}

				return this.hoveredItems;
			}
		}

		public void ClearSelection()
		{
			this.selectedItems.Clear();
			foreach (RadPanelBarGroupElement group in this.radPanelBar.Items)
			{
				foreach (StockItemElement stockElement in group.Items)
				{
					stockElement.SetValue(StockItemElement.IsSelectedProperty, false);
				}
			}
		}

		public void SelectItem(StockItem stockItem)
		{
			string groupName = stockItem.Valuation.Replace(" ", "");
			RadPanelBarGroupElement group = this.radPanelBar.Items[groupName] as RadPanelBarGroupElement;

			if (group != null)
			{
				this.SetIsSelectedProperty(group.Items, stockItem, true);
			}
		}

		#endregion
	}
}

