//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using FinanceApplicationCAB.Infrastructure.Interface;
using Telerik.WinControls.UI;
using System.Collections.Generic;
using Telerik.WinControls;
using System.Drawing;
using Telerik.WinControls.Primitives;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public partial class StockGridView : UserControl, IStockGridView
	{
		private RadGridView radGridView;
		private List<StockItem> selectedItems = new List<StockItem>();
		private List<StockItem> hoveredItems = new List<StockItem>();

		public StockGridView()
		{
			InitializeComponent();

			RadThemeManager themeManager = new RadThemeManager();

			ThemeSource gridThemeSource = new ThemeSource();
			gridThemeSource.StorageType = ThemeStorageType.Resource;
			gridThemeSource.ThemeLocation = "FinanceApplicationCAB.Infrastructure.Module.Resources.FinanceApplication_GridView.xml";
			themeManager.LoadedThemes.Add(gridThemeSource);

			RadPanel panel = new RadPanel();
			panel.PanelElement.Shape = new RoundRectShape(6);
			panel.Dock = DockStyle.Fill;

			TypeSelector fillSelector = new TypeSelector(typeof(FillPrimitive));
			FillPrimitive panelFill = fillSelector.GetSelectedElements(panel.PanelElement).First.Value as FillPrimitive;
			panelFill.BackColor = Color.FromArgb(219, 225, 211);
			panelFill.BackColor2 = Color.FromArgb(179, 191, 166);

			this.radGridView = new RadGridView();
			this.radGridView.Location = new System.Drawing.Point(0, 0);
			this.radGridView.MasterGridViewTemplate.AllowAddNewRow = false;
			this.radGridView.Margin = new Padding(5);
			panel.Controls.Add(this.radGridView);
			this.radGridView.Dock = DockStyle.Fill;
			this.radGridView.ThemeName = "Desert"; // "FinanceApplication";

			this.Controls.Add(panel);

			this.radGridView.SelectionChanged += new EventHandler(radGridView_SelectionChanged);
		}

		protected override void OnLoad(EventArgs e)
		{
			_presenter.OnViewReady();
			base.OnLoad(e);
		}

		void radGridView_SelectionChanged(object sender, EventArgs e)
		{
			this.selectedItems.Clear();
			foreach (GridViewRowInfo row in this.radGridView.SelectedRows)
			{
				this.selectedItems.Add(row.DataBoundItem as StockItem);
			}

			this.OnSelectedItemsChanged();
		}

		#region IStockGridView Members

		public void ShowStockItems(List<StockItem> stockItems)
		{
			List<StockItem> currentList = this.radGridView.DataSource as List<StockItem>;
			if (currentList != null && currentList.Count > 0)
			{
				if (stockItems.Count > 0 && currentList[0].Valuation == stockItems[0].Valuation)
				{
					return;
				}
			}
			
			this.radGridView.DataSource = stockItems;
		}

		public event EventHandler<EventArgs> SelectedItemsChanged;

		private void OnSelectedItemsChanged()
		{
			if (this.SelectedItemsChanged != null)
			{
				this.SelectedItemsChanged(this, EventArgs.Empty);
			}
		}

		public List<StockItem> SelectedItems
		{
			get
			{
				return this.selectedItems;
			}
		}

		public event EventHandler<EventArgs> HoveredItemsChanged;

		private void OnHoveredItemsChanged()
		{
			if (this.HoveredItemsChanged != null)
			{
				this.HoveredItemsChanged(this, EventArgs.Empty);
			}
		}

		public List<StockItem> HoveredItems
		{
			get
			{
				return this.hoveredItems;
			}
		}

		public void SelectItem(StockItem stockItem)
		{
			foreach (GridViewRowInfo rowInfo in this.radGridView.Rows)
			{
				if(rowInfo.Cells["ID"].ToString() == stockItem.ID)
				{
					this.selectedItems.Add(stockItem);
					rowInfo.IsCurrent = true;
					break;
				}
			}
		}

		public void ClearSelection()
		{
			this.selectedItems.Clear();
			//this.radGridView.SelectedRows.Clear();
		}

		#endregion
	}
}

