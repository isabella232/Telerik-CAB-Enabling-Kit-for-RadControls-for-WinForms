//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using FinanceApplicationCAB.Infrastructure.Interface;
using FinanceApplicationCAB.Infrastructure.Interface.Constants;
using Telerik.CAB.WinForms.SmartPartInfos;
using Telerik.CAB.WinForms.WorkSpaces;
using Telerik.WinControls.UI;
using FinanceApplicationCAB.Infrastructure.Module.Services;
using Telerik.WinControls.UI.Docking;

namespace FinanceApplicationCAB.Infrastructure.Module
{
	public class ModuleController : WorkItemController
	{
		public override void Run()
		{
			this.LoadStockPortfolio();
			this.AddServices();
			this.ExtendMenu();
			this.ExtendToolStrip();
			this.AddViews();
		}

		private void LoadStockPortfolio()
		{
			StockPortfolio stockPortfolio = new StockPortfolio();
			stockPortfolio.LoadData("Equity.xml");

			this.WorkItem.State[StateKeys.StockPortfolio] = stockPortfolio;
		}

		private void AddServices()
		{
			//TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
			//		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm

			ISelectionService selectionService = new SelectionService(this.WorkItem);
			this.WorkItem.Services.Add<ISelectionService>(selectionService);
		}

		private void ExtendMenu()
		{
			//TODO: add menu items here, normally by calling the "Add" method on
			//		on the WorkItem.UIExtensionSites collection. For an example 
			//		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm

			RadMenuItem showStocksInMenuItem = new RadMenuItem("Show Stocks In");
			this.WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu].Add<RadMenuItem>(showStocksInMenuItem);

			RadMenuItem treeViewMenuItem = new RadMenuItem("TreeView");
			this.WorkItem.Commands[CommandNames.ShowStocksInTreeView].AddInvoker(treeViewMenuItem, "Click");

			RadMenuItem panelBarMenuItem = new RadMenuItem("PanelBar");
			this.WorkItem.Commands[CommandNames.ShowStocksInPanelBar].AddInvoker(panelBarMenuItem, "Click");

			showStocksInMenuItem.Items.Add(panelBarMenuItem);
			showStocksInMenuItem.Items.Add(treeViewMenuItem);

			this.WorkItem.Commands[CommandNames.ShowStocksInPanelBar].Status = CommandStatus.Disabled;
			this.WorkItem.Commands[CommandNames.ShowStocksInTreeView].Status = CommandStatus.Enabled;
		}

		DockingSmartPartInfo PortfolioViewInfo
		{
			get
			{
				DockingSmartPartInfo portfolioInfo = new DockingSmartPartInfo();
				portfolioInfo.Title = "Stock Portfolio";
				portfolioInfo.Width = 250;
                portfolioInfo.Height = 300;
				portfolioInfo.TabStripVisible = false;
				portfolioInfo.DockPosition = DockPosition.Left;

				return portfolioInfo;
			}
		}

		[CommandHandler(CommandNames.ShowStocksInPanelBar)]
		public void panelBarMenuItem_Click(object sender, EventArgs e)
		{
			object portfolioTreeView = this.WorkItem.SmartParts["StockPortfolioTreeView"];
			this.WorkItem.Workspaces[WorkspaceNames.DockableWorkspace].Hide(portfolioTreeView);

			this.ShowViewInWorkspace<StockPortfolioView>("StockPortfolioView", WorkspaceNames.DockableWorkspace, this.PortfolioViewInfo);

			this.WorkItem.Commands[CommandNames.ShowStocksInPanelBar].Status = CommandStatus.Disabled;
			this.WorkItem.Commands[CommandNames.ShowStocksInTreeView].Status = CommandStatus.Enabled;
		}

		[CommandHandler(CommandNames.ShowStocksInTreeView)]
		public void treeViewMenuItem_Click(object sender, EventArgs e)
		{
			object panelBarView = this.WorkItem.SmartParts["StockPortfolioView"];
			this.WorkItem.Workspaces[WorkspaceNames.DockableWorkspace].Hide(panelBarView);

			this.ShowViewInWorkspace<StockPortfolioTreeView>("StockPortfolioTreeView", WorkspaceNames.DockableWorkspace, this.PortfolioViewInfo);

			this.WorkItem.Commands[CommandNames.ShowStocksInPanelBar].Status = CommandStatus.Enabled;
			this.WorkItem.Commands[CommandNames.ShowStocksInTreeView].Status = CommandStatus.Disabled;
		}

		private void ExtendToolStrip()
		{
			//TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
			//		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm
		}

		private void AddViews()
		{
			//TODO: create the Module views, add them to the WorkItem and show them in 
			//		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm
			
			//(this.WorkItem.Workspaces[WorkspaceNames.DockableWorkspace] as RadDockableWorkspace).SuspendLayout();

			DockingSmartPartInfo chartInfo = new DockingSmartPartInfo();
			chartInfo.Title = "Stock Chart";
            chartInfo.TabbedDocument = true;
			chartInfo.Width = 700;
            chartInfo.Height = 700;
			this.ShowViewInWorkspace<StockChartView>("StockChartView", WorkspaceNames.DockableWorkspace, chartInfo);

			DockingSmartPartInfo gridInfo = new DockingSmartPartInfo();
			gridInfo.Title = "Stock Details Grid";
			gridInfo.TabStripVisible = false;
			gridInfo.Height = 300;
            gridInfo.Width= 300;
			gridInfo.ParentName = "StockChartView";
			gridInfo.DockPosition = DockPosition.Bottom;
			this.ShowViewInWorkspace<StockGridView>("StockGridView", WorkspaceNames.DockableWorkspace, gridInfo);

			this.ShowViewInWorkspace<StockPortfolioView>("StockPortfolioView", WorkspaceNames.DockableWorkspace, this.PortfolioViewInfo);

			DockingSmartPartInfo detailsInfo = new DockingSmartPartInfo();
			detailsInfo.Title = "Stock Details";
			detailsInfo.Width = 200;
            detailsInfo.Height = 200;
			detailsInfo.TabStripVisible = false;
			detailsInfo.DockPosition = DockPosition.Right;
			this.ShowViewInWorkspace<StockDetailsView>("StockDetailsView", WorkspaceNames.DockableWorkspace, detailsInfo);

			DockingSmartPartInfo newsInfo = new DockingSmartPartInfo();
			newsInfo.Title = "News and Reports";
			newsInfo.Height = 300;
            newsInfo.Width = 300;
			newsInfo.TabStripVisible = false;
			newsInfo.ParentName = "StockDetailsView";
			newsInfo.DockPosition = DockPosition.Bottom;
			this.ShowViewInWorkspace<StockNewsView>("StockNewsView", WorkspaceNames.DockableWorkspace, newsInfo);

			//(this.WorkItem.Workspaces[WorkspaceNames.DockableWorkspace] as RadDockableWorkspace).ResumeLayout();
		}

		//TODO: Add CommandHandlers and/or Event Subscriptions
		//		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
		//		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
	}
}
